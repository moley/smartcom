import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

plugins {
    id 'org.openjfx.javafxplugin' version '0.0.6'
    id 'application'
}

javafx {
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.web', 'javafx.swing', 'javafx.media']
    version = "11.0.2" //12-ea+8"
}


dependencies {
    compile 'org.kordamp.ikonli:ikonli-javafx:11.3.4'
    compile 'org.kordamp.ikonli:ikonli-fontawesome-pack:11.3.4'
    compile 'org.controlsfx:controlsfx:11.0.0' //GUI Elements / PopOver
    compile 'org.openjfx:javafx-controls:14-ea+2'
    compile 'org.openjfx:javafx-graphics:14-ea+2'
    compile 'org.openjfx:javafx-swing:14-ea+2'
    compile 'org.openjfx:javafx-media:14-ea+2'

    compile 'com.jfoenix:jfoenix:9.0.8'

    compile 'com.1stleg:jnativehook:2.1.0'

    compile 'org.springframework:spring-websocket:5.2.2.RELEASE'
    compile 'org.springframework:spring-messaging:5.2.2.RELEASE'
    runtime 'javax.websocket:javax.websocket-api:1.1'
    runtime 'org.glassfish.tyrus.bundles:tyrus-standalone-client:1.9'

    compile 'com.calendarfx:view:11.8.3'
    compile 'org.jsoup:jsoup:1.13.1'

    compile project (':spica-cli')
}

mainClassName = 'org.spica.fx.Main'

DefaultTask generateVersionFileTask = task 'generateVersionFile', {
    doFirst{
        File leguanVersionFile = file('src/main/resources/spica-fx.version')
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
        leguanVersionFile.text = version + " ( Build from " + LocalDateTime.now().format(formatter) + " )"
        println "Create file $leguanVersionFile.absolutePath with content $leguanVersionFile.text"
    }
}
processResources.dependsOn generateVersionFileTask

task prepareDmg {
    doFirst {

        file('build/dmgInput').deleteDir()

        if (file('build/libs/').listFiles().length > 1)
            throw new IllegalStateException("More than one jar file exists")

        copy {
            from sourceSets.main.runtimeClasspath
            into 'build/dmgInput'
        }
        copy {
            from file('build/libs')

            into 'build/dmgInput'
            eachFile {
                String nameWithoutVersion = it.name.substring(0, project.name.length()) + ".jar"
                it.name = nameWithoutVersion
            }
        }
    }
    dependsOn tasks.jar
}

task createDmg(type: Exec) {
    doFirst {
        file('build/dmg').deleteDir()
    }

    println "Using version $version"

    commandLine 'jpackage', '--verbose', '--icon', '../spica.icns',
            '--app-version', version.replace('-SNAPSHOT', ''), '--dest', 'build/dmg', '--input', 'build/dmgInput',
            '--name', 'SpicaFX', '--main-jar', 'spica-fxclient.jar',
            '--main-class', 'org.spica.fx.Main', '--type', 'dmg'

    dependsOn tasks.prepareDmg

}

task installLocal(type: Copy) {
    def localCliInstallationPath = '/Applications/SpicaFX.app/Contents/app/'
    from file('build/dmgInput')
    eachFile {
        println "Install $it to $destinationDir/$it.path"
    }
    into localCliInstallationPath
    includeEmptyDirs = false
    dependsOn tasks.prepareDmg
}

tasks.build.dependsOn installDist
tasks.release.dependsOn createDmg
