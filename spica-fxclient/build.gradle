plugins {
    id 'org.openjfx.javafxplugin' version '0.0.6'
    id 'application'
}

javafx {
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.web', 'javafx.swing', 'javafx.media']
    version = "11.0.2" //12-ea+8"
}


dependencies {
    compile 'org.kordamp.ikonli:ikonli-javafx:11.3.4'
    compile 'org.kordamp.ikonli:ikonli-fontawesome-pack:11.3.4'
    compile 'org.controlsfx:controlsfx:11.0.0' //GUI Elements / PopOver
    compile 'org.openjfx:javafx-controls:14-ea+2'
    compile 'org.openjfx:javafx-graphics:14-ea+2'
    compile 'org.openjfx:javafx-swing:14-ea+2'
    compile 'org.openjfx:javafx-media:14-ea+2'

    compile 'org.springframework:spring-websocket:5.2.2.RELEASE'
    compile 'org.springframework:spring-messaging:5.2.2.RELEASE'
    runtime 'javax.websocket:javax.websocket-api:1.1'
    runtime 'org.glassfish.tyrus.bundles:tyrus-standalone-client:1.9'

    compile 'com.calendarfx:view:11.8.3'
    compile 'org.jsoup:jsoup:1.13.1'

    compile project (':spica-cli')
}

mainClassName = 'org.spica.fx.SpicaFxApplication'

def localCliInstallationPath = System.getProperty("user.home") + '/programs/spica-fxclient'

task clearLocalCliInstallationPath(type: Delete) {
    delete localCliInstallationPath
    followSymlinks = true
}

task installLocal(type: Copy) {
    def zipFile = project(':spica-fxclient').file("build/distributions/spica-fxclient-${version}.zip")
    println zipFile.absolutePath
    dependsOn 'clearLocalCliInstallationPath'
    from zipTree(zipFile)
    eachFile {
        path = path.substring(path.indexOf("/"), path.length())
    }
    into localCliInstallationPath
    includeEmptyDirs = false
    dependsOn tasks.distZip

    doLast {
        File javaVersionFile = new File (localCliInstallationPath + "/.java-version")
        javaVersionFile.createNewFile()
        javaVersionFile.text = '11.0'
    }
}
