openapi: "3.0.0"
info:
  version: 1.0.0
  title: "spica rest software component"
  description: "Rest API for the software component of spica"
servers:
  - url: http://localhost:8765/api
security:
  - BasicAuth

paths:
  /software/deployments/list:
    get:
      tags:
        - software
      operationId: "getDeployments"
      description: "get list of deployments"
      responses:
        '200':
          description: 'list of valid deployments'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IdAndDisplaynameInfo"


  /software/constants/list:
    get:
      tags:
        - software
      operationId: "getConstants"
      description: "get all constants at once"
      responses:
        '200':
          description: 'infoobject with all constants for software'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SoftwareConstantsInfo"

  /software/types/list:
    get:
      tags:
        - software
      operationId: "getTypes"
      description: "get list of types"
      responses:
        '200':
          description: 'list of valid types'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IdAndDisplaynameInfo"

  /software/states/list:
    get:
      tags:
        - software
      operationId: "getStates"
      description: "get list of states"
      responses:
        '200':
          description: 'list of valid states'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IdAndDisplaynameInfo"

  /software/{softwareId}:
    get:
      tags:
        - software
      operationId: "getSoftwareById"
      description: "get software with id"
      parameters:
        - in: path
          name: softwareId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: software
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SoftwareInfo"

    put:
      tags:
        - software
      operationId: "updateSoftware"
      description: "update existing software"
      parameters:
        - in: path
          name: softwareId
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SoftwareInfo"
      responses:
        '200':
          description: OK

  /software/others/list/{meId}:
    get:
      tags:
        - software
      operationId: "getOtherSoftwareList"
      description: "get list of other software"
      parameters:
        - in: path
          name: meId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: 'list of other software items'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SoftwareInfo"

  /software/list:
    get:
      tags:
        - software
      operationId: "getSoftwareList"
      description: "get list of software"
      responses:
        '200':
          description: 'list of software items'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SoftwareInfo"
    post:
      tags:
        - software
      operationId: "setSoftwareList"
      description: "set list of software"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/SoftwareInfo"

      responses:
        '200':
          description: 'Null response'

  /software/relations/{softwareId}:
    get:
      tags:
        - software
      operationId: "getRelationsBySoftware"
      description: "get relations by software"
      parameters:
        - in: path
          name: softwareId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: software
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RelationInfo"

  /software/relations:
    put:
      tags:
        - software
      operationId: "updateRelations"
      description: "update existing relations"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RelationInfo"
      responses:
        '200':
          description: OK
    post:
      tags:
        - software
      operationId: "setRelations"
      description: "set existing relations"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RelationInfo"
      responses:
        '200':
          description: OK

  /software/metrics:
    get:
      tags:
        - software
      operationId: "getSoftwareMetrics"
      description: "get software metrics"
      responses:
        '200':
          description: software
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SoftwareMetricsInfo"

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

  schemas:

    IdAndDisplaynameInfo:
      type: "object"
      properties:
        id:
          type: "string"
        displayname:
          type: "string"

    ContactInfo:
      type: "object"
      properties:
        id:
          type: "string"
        contactId:
          type: "string"
        role:
          $ref: "#/components/schema/IdAndDisplaynameInfo"

    SoftwareInfo:
      type: "object"
      properties:
        id:
          type: "string"
        parentId:
          type: "string"
        name:
          type: "string"
        description:
          type: "string"
        requirement:
          type: "string"
        deployment:
            $ref: "#/components/schema/IdAndDisplaynameInfo"
        location:
          type: "string"
        format:
          type: "string"
        type:
          $ref: "#/components/schema/IdAndDisplaynameInfo"
        group:
          $ref: "#/components/schema/IdAndDisplaynameInfo"
        state:
          $ref: "#/components/schema/IdAndDisplaynameInfo"
        stateAdditionalText:
          type: "string"
        active:
          type: "boolean"
        needsAction:
          type: "boolean"
        needsActionDescription:
          type: "string"
        technicalDebt:
          type: "integer"
        complexity:
          type: "integer"
        maintainability:
          type: "integer"
        changeFrequency:
          type: "integer"
        fitsArchitecture:
          type: "boolean"
        architectureExceptions:
          type: "string"
        buildsystem:
          type: "string"
        bugtracking:
          type: "string"
        targetDate:
          type: "string"

        withOnlineHelp:
          type: "boolean"
        withMonitoring:
          type: "boolean"
        withPersistence:
          type: "boolean"
        withUi:
          type: "boolean"
        withSecurity:
          type: "boolean"
        deploymentName:
          type: "string"

        screenshot:
          type: "string"

        contactsUser:
          type: array
          items:
            $ref: "#/components/schema/ContactInfo"

        contactsTeam:
          type: array
          items:
            $ref: "#/components/schema/ContactInfo"

        vcs:
          type: "string"
        technologies:
          type: array
          items:
            $ref: "#/components/schema/IdAndDisplaynameInfo"
        children:
          type: array
          items:
            $ref: "#/components/schema/SoftwareInfo"

    RelationInfo:
      type: "object"
      properties:
        id:
          type: "string"
        relationtype:
          type: "string"
        state:
          $ref: "#/components/schema/IdAndDisplaynameInfo"
        source:
          $ref: "#/components/schema/SoftwareInfo"
        target:
          $ref: "#/components/schema/SoftwareInfo"

    SoftwareConstantsInfo:
      type: "object"
      properties:
        deployments:
          type: array
          items:
            $ref: "#/components/schema/IdAndDisplaynameInfo"
        types:
          type: array
          items:
            $ref: "#/components/schema/IdAndDisplaynameInfo"
        states:
          type: array
          items:
            $ref: "#/components/schema/IdAndDisplaynameInfo"
        relationtypes:
          type: array
          items:
            $ref: "#/components/schema/IdAndDisplaynameInfo"
        groups:
          type: array
          items:
            $ref: "#/components/schema/IdAndDisplaynameInfo"
        roles:
          type: array
          items:
            $ref: "#/components/schema/IdAndDisplaynameInfo"

    SoftwareMetricsInfo:
      type: "object"
      properties:
        history:
          $ref: "#/components/schema/Diagram"

    Diagram:
      type: "object"
      properties:
        labels:
          type: array
          items:
            type: "string"
        datasets:
          type: array
          items:
            $ref: "#/components/schema/LineDataSet"


    LineDataSet:
      type: "object"
      properties:
        label:
          type: "string"
        data:
          type: array
          items:
            type: "number"
        color:
          type: "string"


