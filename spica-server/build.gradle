plugins {
  id 'com.bmuschko.docker-spring-boot-application' version '6.4.0'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.openapi.generator'


dependencies {
  compile project(':spica-commons')
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.boot:spring-boot-starter-security'
  compile 'org.springframework.boot:spring-boot-starter-data-jpa'
  compile 'org.springframework.boot:spring-boot-starter-websocket'

  implementation 'org.openapitools:jackson-databind-nullable:0.2.1' //TODO unused import, check how to get rid of

  compile 'org.json:json:20201115'

  //https://spring.io/guides/gs/messaging-stomp-websocket/
  implementation 'org.webjars:webjars-locator-core'
  implementation 'org.webjars:sockjs-client:1.0.2'
  implementation 'org.webjars:stomp-websocket:2.3.3'
  implementation 'org.webjars:bootstrap:3.3.7'
  implementation 'org.webjars:jquery:3.1.1-1'

  compile 'io.jsonwebtoken:jjwt:0.9.0'

  compile 'io.atlassian.fugue:fugue:4.7.2' //dep for java-client

  compile ('org.apache.directory.api:apache-ldap-api:1.0.0') {
    exclude module: 'slf4j-log4j12'
  }

  compile 'io.swagger:swagger-annotations:1.5.22'
  compile 'org.mapstruct:mapstruct:1.4.1.Final'

  runtime 'com.h2database:h2:1.4.179'
  runtime 'org.postgresql:postgresql:42.2.16.jre7'

  runtime 'ch.qos.logback:logback-core:1.2.3'
  runtime 'ch.qos.logback:logback-classic:1.2.3'

  testCompile('org.springframework.boot:spring-boot-starter-test')
  testCompile project(':spica-javaclient')

}

springBoot {
  mainClassName = 'org.spica.SpicaServerApplication'
}

jar.dependsOn bootJar
jar.onlyIf {false}


bootRun {
  sourceResources sourceSets.main
  jvmArgs = ['-Ddemodata=true']
  args = ["--spring.profiles.active=test"]
}

//here we are going to store swagger files
def swaggerList = []

//iteration by swagger file root folder and save into swaggerList variable
def dir = new File("$rootDir/api/".toString())
dir.eachFileRecurse(groovy.io.FileType.FILES) { file ->
  if (file.getName().endsWith(".yaml"))
    swaggerList << file
}

// Iterate on all swagger files and generate a task for each one with the nomenclature openApiGenerate + swagger name
swaggerList.each {
  def apiName = it.getName().replace(".yaml", "");

  def openApiGenerateTask = tasks.create("openApiGenerate" + apiName.capitalize(), org.openapitools.generator.gradle.plugin.tasks.GenerateTask.class, {
    generatorName = "spring"
    library = "spring-boot"
    inputSpec = "$rootDir/api/".toString() + "${apiName}.yaml"
    outputDir = "$buildDir/generated/openapi".toString()
    apiPackage = "org.spica.server.${apiName}.api"
    modelPackage = "org.spica.server.${apiName}.model"
    configOptions = [
            dateLibrary: "java8-localdatetime",
            java8: "true",
            useBeanValidation: "true",
            interfaceOnly: "true",
            useOptional: "true",
            useLombok: "true"
    ]
  })
  openApiGenerateTask.onlyIf {return true}

  tasks.compileJava.dependsOn openApiGenerateTask
}

sourceSets {
  main {
    java {
      srcDir("$buildDir/generated/openapi/src/gen/java")
      srcDir("$buildDir/generated/openapi/src/main/java")
    }
  }
}

println "Docker - User:" + System.getProperty('docker.username')
println "Docker - Mail:" + System.getProperty('docker.email')

docker {
  registryCredentials {
    username = System.getProperty('docker.username')
    password = System.getProperty('docker.password')
    email = System.getProperty('docker.email')
  }
  springBootApplication {
    baseImage = 'openjdk:14'
    ports = [8080]
    images = ["markusoley/spica:${jar.archiveVersion.get()}"]
  }
}
tasks.bootJar.mustRunAfter project(':spica-ngclient').tasks.buildClientProd, project(':spica-ngclient').tasks.buildClient
tasks.dockerBuildImage.dependsOn project(':spica-ngclient').tasks.buildClientProd, classes, bootJar




