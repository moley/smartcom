buildscript {
  repositories {
    mavenCentral()
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots/' }
  }

  dependencies {
    classpath('org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE')
  }
}

plugins {
  id 'org.asciidoctor.convert' version '2.4.0'
  id "com.github.breadmoirai.github-release" version "2.2.12"
}

apply plugin: "com.github.breadmoirai.github-release"


allprojects {
  ext.junitJupiterVersion = '5.3.1'
  ext.junitPlatformVersion = '1.3.1'

  group = 'org.spica'
 

  version = project.rootProject.file('releasenotes.md').text.split("\n").first().replaceAll("\\*", "")

  repositories {
    mavenCentral()
    maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }

    jcenter()
  }

  tasks.create('publish')


  pluginManager.withPlugin('java', {

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    apply plugin: 'jacoco'

    jacocoTestReport {
      reports {
        xml.enabled = true
        html.enabled = true
      }
    }

    test {
      useJUnitPlatform()
      testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat 'full'
        showStackTraces = 'true'
      }
    }

    check.dependsOn jacocoTestReport

    dependencies {

      compileOnly 'org.projectlombok:lombok:1.18.6'
      annotationProcessor 'org.projectlombok:lombok:1.18.6'

      compileOnly 'org.projectlombok:lombok:1.18.2'

      compile 'org.jsoup:jsoup:1.13.1'

      compile 'org.slf4j:slf4j-api:1.7.25'
      testCompile 'org.springframework:spring-test:5.1.2.RELEASE'
      testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
      testCompile("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")
      testCompile("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")

      testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

      testRuntime 'com.h2database:h2:1.4.179'
      testRuntime 'ch.qos.logback:logback-core:1.2.3'
      testRuntime 'ch.qos.logback:logback-classic:1.2.3'


    }

  })
}

subprojects {
  ((Project)it).pluginManager.withPlugin("java", {
    test {
      testLogging {
        events "skipped", "failed"
        exceptionFormat 'full'
        showStackTraces = 'true'
      }
    }
  })

}

println "Java-Version " + System.properties.get("java.home")


githubRelease {
  token System.getProperty ('github.password', '')
  owner System.getProperty ('github.username', '')

  repo 'spica'

  releaseAssets project.files("spica-cli/build/dmg/SpicaCLI-${version}.dmg",
                              "spica-fxclient/build/dmg/SpicaFX-${version}.dmg",
                              "spica-docs/build/libs/spica-docs-${version}.jar")
}

tasks.githubRelease.dependsOn getTasksByName('createDmg', true), getTasksByName('publish', true)

def releasetask = tasks.create('release')
releasetask.dependsOn tasks.githubRelease, tasks.findByPath(':spica-server:dockerPushImage')


