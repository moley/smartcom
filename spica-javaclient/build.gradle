
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'org.openapi.generator'

dependencies {
  compile 'com.squareup.okhttp3:okhttp:4.9.0'
  compile 'javax.annotation:javax.annotation-api:1.3.2'
  compile 'io.swagger.parser.v3:swagger-parser:2.0.24'
  compile 'com.squareup.okhttp3:logging-interceptor:4.9.0'
  compile 'com.google.code.gson:gson:2.8.1'
  compile 'io.gsonfire:gson-fire:1.8.0'
  compile 'org.threeten:threetenbp:1.3.5'

  compile 'com.google.code.gson:gson:2.8.5'
  compile 'com.google.guava:guava:19.0'

  compile 'javax.inject:javax.inject:1'

  compile 'commons-io:commons-io:2.7'
  compile 'commons-cli:commons-cli:1.4'


  compile 'org.slf4j:slf4j-api:1.7.25'

  compile 'org.freemarker:freemarker:2.3.28' //for creation of files


  compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.5'    //for @JsonIgnore
  runtime 'com.fasterxml.jackson.core:jackson-core:2.9.5'           //for @JsonIgnore
  runtime 'com.fasterxml.jackson.core:jackson-databind:2.9.5'       //for @JsonIgnore


  compile 'ch.qos.logback:logback-core:1.2.3' //must be compile because in ShowStatusAction we use implementations to detect logfile
  compile 'ch.qos.logback:logback-classic:1.2.3'

  compile project (':spica-commons')

  compile 'org.codehaus.groovy:groovy:2.5.13'

  testCompile 'org.mockito:mockito-core:2.28.2'
}

//here we are going to store swagger files
def swaggerList = []

//iteration by swagger file root folder and save into swaggerList variable
def dir = new File("$rootDir/api/".toString())
dir.eachFileRecurse(groovy.io.FileType.FILES) { file ->
  if (file.getName().endsWith(".yaml"))
    swaggerList << file
}

// Iterate on all swagger files and generate a task for each one with the nomenclature openApiGenerate + swagger name
swaggerList.each {
  def apiName = it.getName().replace(".yaml", "");

  def openApiGenerateTask = tasks.create("openApiGenerate" + apiName.capitalize(), org.openapitools.generator.gradle.plugin.tasks.GenerateTask.class, {
    generatorName = "java"
    inputSpec = "$rootDir/api/".toString() + "${apiName}.yaml"
    outputDir = "$buildDir/generated/openapi".toString()
    apiPackage = "org.spica.javaclient.api"
    modelPackage = "org.spica.javaclient.model"
    configOptions = [
            dateLibrary: "java8-localdatetime",
            java8: "true",
            useBeanValidation: "true",
            interfaceOnly: "true",
            useOptional: "true",
            useLombok: "true"
    ]
  })

  tasks.compileJava.dependsOn openApiGenerateTask
}

sourceSets {
  main {
    java {
      srcDir("$buildDir/generated/openapi/src/gen/java")
      srcDir("$buildDir/generated/openapi/src/main/java")
    }
  }
}


