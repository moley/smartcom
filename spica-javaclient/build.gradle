plugins {
  id 'org.hidetake.swagger.generator' version '2.18.1'
}

apply plugin: 'java'

dependencies {
  swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.5'  // or Swagger Codegen V3
  compile 'io.swagger.core.v3:swagger-annotations:2.0.7'

  compile 'com.squareup.okhttp:okhttp:2.7.5'
  compile 'com.squareup.okhttp:logging-interceptor:2.7.5'
  compile 'com.google.code.gson:gson:2.8.1'
  compile 'io.gsonfire:gson-fire:1.8.0'
  compile 'org.threeten:threetenbp:1.3.5'

  compile 'com.google.code.gson:gson:2.8.5'
  compile 'com.google.guava:guava:19.0'

  compile 'javax.inject:javax.inject:1'

  compile 'commons-io:commons-io:2.6'

  compile 'org.slf4j:slf4j-api:1.7.25'

  compile 'org.freemarker:freemarker:2.3.28' //for creation of files


  compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.5'    //for @JsonIgnore
  runtime 'com.fasterxml.jackson.core:jackson-core:2.9.5'           //for @JsonIgnore
  runtime 'com.fasterxml.jackson.core:jackson-databind:2.9.5'       //for @JsonIgnore


  runtime 'ch.qos.logback:logback-core:1.2.3'
  runtime 'ch.qos.logback:logback-classic:1.2.3'

  compile project (':spica-commons')

  compile 'org.eclipse.jgit:org.eclipse.jgit:4.11.0.201803080745-r'




}

swaggerSources {

  spicaProject {
    inputFile = project.rootProject.project('spica-server').file('spica-server-project.yaml')
    code {
      language = 'java'
      rawOptions = ['--api-package=org.spica.javaclient.api', '--model-package=org.spica.javaclient.model']
      configFile = rootProject.file('swagger-config.json')
    }
  }
  spicaCommunication {
    inputFile = project.rootProject.project('spica-server').file('spica-server-communication.yaml')
    code {
      language = 'java'
      rawOptions = ['--api-package=org.spica.javaclient.api', '--model-package=org.spica.javaclient.model']
      components = ['models', 'apis']
      configFile = rootProject.file('swagger-config.json')
    }
  }

  spicaTimes {
    inputFile = project.rootProject.project('spica-server').file('spica-server-times.yaml')
    code {
      language = 'java'
      rawOptions = ['--api-package=org.spica.javaclient.api', '--model-package=org.spica.javaclient.model']
      components = ['models', 'apis']
      configFile = rootProject.file('swagger-config.json')
    }
  }

  spicaUser {
    inputFile = project.rootProject.project('spica-server').file('spica-server-user.yaml')
    code {
      language = 'java'
      rawOptions = ['--api-package=org.spica.javaclient.api', '--model-package=org.spica.javaclient.model']
      components = ['models', 'apis']
      configFile = rootProject.file('swagger-config.json')
    }
  }
}

sourceSets.main.java.srcDir "${swaggerSources.spicaProject.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.spicaProject.code.outputDir}/src/main/resources"
tasks.compileJava.dependsOn swaggerSources.spicaProject.code

sourceSets.main.java.srcDir "${swaggerSources.spicaTimes.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.spicaTimes.code.outputDir}/src/main/resources"
tasks.compileJava.dependsOn swaggerSources.spicaTimes.code

sourceSets.main.java.srcDir "${swaggerSources.spicaUser.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.spicaUser.code.outputDir}/src/main/resources"
tasks.compileJava.dependsOn swaggerSources.spicaUser.code

sourceSets.main.java.srcDir "${swaggerSources.spicaCommunication.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.spicaCommunication.code.outputDir}/src/main/resources"
tasks.compileJava.dependsOn swaggerSources.spicaCommunication.code



tasks.classes.dependsOn tasks.generateSwaggerCode
