import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'org.spica.cli.Main'


dependencies {
  compile project (':spica-javaclient')

  compile 'de.codeshelf.consoleui:consoleui:0.0.9'
}


tasks.build.dependsOn tasks.distZip

def localCliInstallationPath = System.getProperty("user.home") + '/programs/spica-cli'

task clearLocalCliInstallationPath(type: Delete) {
  delete localCliInstallationPath
  followSymlinks = true
}

DefaultTask generateVersionFileTask = task 'generateVersionFile', {
  doFirst{
    File leguanVersionFile = file('src/main/resources/spica-cli.version')
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
    leguanVersionFile.text = version + " ( Build from " + LocalDateTime.now().format(formatter) + " )"
    println "Create file $leguanVersionFile.absolutePath with content $leguanVersionFile.text"
  }
}
processResources.dependsOn generateVersionFileTask

task installLocal(type: Copy) {
  def zipFile = project(':spica-cli').file("build/distributions/spica-cli-${version}.zip")
  println zipFile.absolutePath
  dependsOn 'clearLocalCliInstallationPath'
  from zipTree(zipFile)
  eachFile {
    path = path.substring(path.indexOf("/"), path.length())
  }
  into localCliInstallationPath
  includeEmptyDirs = false
  dependsOn tasks.distZip
}

tasks.register("demoData", JavaExec) {
  dependsOn testClasses
  classpath = sourceSets.test.runtimeClasspath

  main = 'org.spica.cli.demodata.CreateDemoData'
}

