import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven-publish'

mainClassName = 'org.spica.cli.Main'

dependencies {
  compile project (':spica-javaclient')

  compile 'de.codeshelf.consoleui:consoleui:0.0.9'
}


tasks.build.dependsOn tasks.distZip

DefaultTask generateVersionFileTask = task 'generateVersionFile', {
  doFirst{
    File leguanVersionFile = file('src/main/resources/spica-cli.version')
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
    leguanVersionFile.text = version + " ( Build from " + LocalDateTime.now().format(formatter) + " )"
    println "Create file $leguanVersionFile.absolutePath with content $leguanVersionFile.text"
  }
}
processResources.dependsOn generateVersionFileTask

task prepareDmg {
  doFirst {

    file('build/dmgInput').deleteDir()

    if (file('build/libs/').listFiles().length > 1)
      throw new IllegalStateException("More than one jar file exists")

    copy {
      from sourceSets.main.runtimeClasspath
      into 'build/dmgInput'
    }
    copy {
      from file('build/libs')

      into 'build/dmgInput'
      eachFile {
        String nameWithoutVersion = it.name.substring(0, project.name.length()) + ".jar"
        it.name = nameWithoutVersion
      }
    }
  }
  dependsOn tasks.jar
}

task createDmg(type: Exec) {
  doFirst {
    file('build/dmg').deleteDir()
  }

  println "Using version $version"

  commandLine 'jpackage', '--verbose', '--icon', '../spica.icns',
          '--app-version', version.replace('-SNAPSHOT', ''), '--dest', 'build/dmg', '--input', 'build/dmgInput',
          '--name', 'SpicaCLI', '--main-jar', 'spica-cli.jar',
          '--main-class', 'org.spica.cli.Main', '--type', 'dmg'

  dependsOn tasks.prepareDmg

}

task installLocal(type: Copy) {
  def localCliInstallationPath = '/Applications/SpicaCLI.app/Contents/app/'
  from file('build/dmgInput')
  eachFile {
    println "Install $it"
  }
  into localCliInstallationPath
  includeEmptyDirs = false
  dependsOn tasks.prepareDmg
}

build.dependsOn installDist
tasks.release.dependsOn createDmg
tasks.release.dependsOn tasks.publish
