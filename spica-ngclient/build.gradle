apply plugin : 'base'
apply plugin: 'org.openapi.generator'
apply plugin: 'com.github.node-gradle.node'


//here we are going to store swagger files
def swaggerList = []

//iteration by swagger file root folder and save into swaggerList variable
def dir = new File("$rootDir/api/".toString())
dir.eachFileRecurse(groovy.io.FileType.FILES) { file ->
  if (file.getName().endsWith(".yaml"))
    swaggerList << file
}

task buildClient(type: NpmTask, dependsOn: 'npmInstall') {
  group = 'build'
  description = 'Compile client side assets for production'
  args = ['run', 'build']
}

task buildClientProd(type: NpmTask, dependsOn: 'npmInstall') {
  group = 'build'
  description = 'Compile client side assets for production'
  args = ['run', 'buildProd']
}

task clientTest(type: NpmTask, dependsOn: 'npmInstall') {
  group = 'verification'
  description = 'Executes client side unit tests'
  args = ['run', 'test']
}

task clientIntegrationTest(type: NpmTask, dependsOn: 'npmInstall') {
  group = 'verification'
  description = 'Executes client side integration tests'
  args = ['run', 'e2e']
}

// Iterate on all swagger files and generate a task for each one with the nomenclature openApiGenerate + swagger name
swaggerList.each {
  def apiName = it.getName().replace(".yaml", "");

  def openApiGenerateTask = tasks.create("openApiGenerate" + apiName.capitalize(), org.openapitools.generator.gradle.plugin.tasks.GenerateTask, {
    generatorName = "typescript-angular"
    inputSpec = "$rootDir/api/".toString() + "${apiName}.yaml"
    outputDir = "$projectDir/src/app/modules/generated/" + apiName.toString()
    apiPackage = "api"
    modelPackage = "model"
    invokerPackage = "api"
  })
  tasks.buildClient.dependsOn openApiGenerateTask
}

tasks.build.dependsOn tasks.npmInstall
tasks.build.dependsOn tasks.buildClient

tasks.withType(org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
  outputs.upToDateWhen { false }
  outputs.cacheIf { false }
}

tasks.clean.doFirst {
  project.file("src/app/modules/generated").deleteDir()
}



